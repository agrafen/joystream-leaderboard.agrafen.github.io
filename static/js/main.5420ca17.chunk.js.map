{"version":3,"sources":["components/table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firstLoad","defaultColumn","Filter","Header","column","id","filterTypes","fuzzyText","rows","filterValue","defaultPropGetter","Table","columns","data","fetchData","initSortBy","striped","total","getRowProps","showColumnHidding","useState","localPageSize","setLocalPageSize","controlledPageCount","React","useMemo","Math","ceil","useTable","initialState","pageIndex","pageSize","sortBy","pageCount","undefined","useFilters","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","allColumns","state","filters","useEffect","filter","sort","sortDesc","desc","prms","forEach","f","value","length","handleGetList","limit","offset","className","cn","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","i","cells","cell","index","getCellProps","onClick","disabled","type","defaultValue","onChange","e","target","Number","style","width","memo","App","rawData","setData","a","axios","get","result","scores","totalScores","accessor","directScores","score","d","reduce","prev","curr","StrictMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5420ca17.chunk.js","sourcesContent":["import React, { useEffect, useState, PropsWithChildren, ReactElement } from 'react';\r\nimport {\r\n  HeaderProps,\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useFilters,\r\n  useGlobalFilter,\r\n  FilterValue,\r\n  IdType,\r\n  Row,\r\n  TableOptions,\r\n  Column,\r\n} from 'react-table';\r\nimport cn from 'classnames';\r\n\r\ninterface Table<T extends object>/*  extends TableOptions<T>  */{\r\n  id: string;\r\n  data: Array<T>;\r\n  columns: Array<Column<T>>;\r\n  fetchData?: Function;\r\n  initSortBy?: Array<{\r\n    id: string;\r\n    desc: boolean;\r\n  }>;\r\n  striped?: boolean;\r\n  pageCount?: Number;\r\n  total?: number;\r\n  getRowProps?: Function;\r\n  showColumnHidding?: boolean;\r\n}\r\n\r\nlet firstLoad = true;\r\nconst handleGetList = (fetchData: Function, filter: any, data: any) => {\r\n  if (!fetchData) {\r\n    return;\r\n  }\r\n\r\n  if (filter.sort && filter.sort[0]) {\r\n    filter.sortBy = filter.sort[0].id;\r\n    filter.sortDesc = filter.sort[0].desc;\r\n    delete filter.sort;\r\n  }\r\n\r\n  const prms: { [index: string]: any } = {};\r\n  filter.filters.forEach((f: { id: string; value: any }) => {\r\n    prms[f.id] = f.value;\r\n  });\r\n\r\n  delete filter.filters;\r\n\r\n  if (firstLoad && data && data.length) {\r\n    firstLoad = false;\r\n  } else {\r\n    fetchData({\r\n      ...filter,\r\n      ...prms,\r\n    });\r\n    firstLoad = false;\r\n  }\r\n};\r\n\r\nconst DefaultHeader: React.FC<HeaderProps<any>> = ({ column }) => (\r\n  <>{column.id}</>\r\n);\r\n\r\nfunction DefaultColumnFilter<T extends object>() {\r\n  return null;\r\n}\r\n\r\nconst defaultColumn = {\r\n  Filter: DefaultColumnFilter,\r\n  Header: DefaultHeader,\r\n};\r\n\r\nexport function fuzzyTextFilter<T extends object>(\r\n  rows: Array<Row<T>>,\r\n  id: IdType<T>,\r\n  filterValue: FilterValue\r\n) {\r\n  return null;\r\n}\r\n\r\nconst filterTypes = {\r\n  fuzzyText: fuzzyTextFilter,\r\n};\r\n\r\nconst defaultPropGetter = () => ({});\r\n\r\nfunction Table<T extends object> ({\r\n  id,\r\n  columns,\r\n  data,\r\n  fetchData,\r\n  initSortBy = [],\r\n  striped = false,\r\n  total = 0,\r\n  getRowProps = defaultPropGetter,\r\n  showColumnHidding = false,\r\n}: Table<T>): ReactElement {\r\n  const [showColumnHiddingBlock, setShowColumnHiddingBlock] = useState(false);\r\n\r\n  const [localPageSize, setLocalPageSize] = useState<number>(100);\r\n\r\n  const controlledPageCount = React.useMemo(\r\n    () => Math.ceil(total / localPageSize),\r\n    [total, localPageSize]\r\n  );\r\n\r\n  // console.log('table columns', columns);\r\n  // console.log('table data', data);\r\n  \r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    allColumns,\r\n    state: { pageIndex, pageSize, sortBy, filters },\r\n  } = useTable<T>(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: {\r\n        pageIndex: 0,\r\n        pageSize: localPageSize,\r\n        // hiddenColumns: getUserSetting(`Table${id}-hiddenColumns`) || [],\r\n        sortBy: initSortBy\r\n      },\r\n      defaultColumn,\r\n      filterTypes, // TODO: !!!!!!!!!!!!!!!!\r\n      // manualPagination: !!fetchData,\r\n      // manualSortBy: !!fetchData,\r\n      // manualFilters: !!fetchData,\r\n      // autoResetPage: !fetchData,\r\n      // autoResetSortBy: !fetchData,\r\n      pageCount: !!fetchData ? controlledPageCount : undefined,\r\n    },\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );  \r\n\r\n  useEffect(() => {\r\n    if (fetchData) {\r\n      handleGetList(\r\n        fetchData,\r\n        {\r\n          limit: pageSize,\r\n          offset: pageIndex * pageSize,\r\n          sort: sortBy,\r\n          filters,\r\n        },\r\n        data\r\n      );\r\n    }\r\n  }, [fetchData, pageSize, pageIndex, sortBy, filters]);\r\n\r\n  useEffect(() => {\r\n    // setUserSetting(`Table${id}-pageSize`, pageSize);\r\n    setLocalPageSize(pageSize);\r\n  }, [pageSize]);\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      {/* {showColumnHidding && (\r\n        <Button\r\n          link\r\n          onClick={(e) => setShowColumnHiddingBlock(!showColumnHiddingBlock)}\r\n        >\r\n          {showColumnHiddingBlock ? 'Скрыть настройки' : 'Показать настройки'}\r\n        </Button>\r\n      )} */}\r\n      {/* {showColumnHidding && showColumnHiddingBlock && (\r\n        <div>\r\n          {allColumns.map((column) => {\r\n            const columnProps = column.getToggleHiddenProps();\r\n\r\n            const handleChangeHidden = (e) => {\r\n              const hiddens = getUserSetting(`Table${id}-hiddenColumns`) || [];\r\n              const indx = hiddens.indexOf(column.id);\r\n\r\n              if (e.value) {\r\n                delete hiddens[indx];\r\n              } else {\r\n                hiddens.push(column.id);\r\n              }\r\n\r\n              // setUserSetting(`Table${id}-hiddenColumns`, hiddens);\r\n\r\n              columnProps.onChange(e);\r\n            };\r\n\r\n            return (\r\n              <span key={column.id}>\r\n                <Checkbox {...columnProps} onChange={handleChangeHidden}>\r\n                  {column.render('Header')}\r\n                </Checkbox>\r\n                &nbsp; &nbsp; &nbsp;\r\n              </span>\r\n            );\r\n          })}\r\n          <br />\r\n        </div>\r\n      )} */}\r\n      <div className=\"TableContainer\">\r\n        <table\r\n          {...getTableProps()}\r\n          className={cn('Table', {\r\n            'Table': striped,\r\n          })}\r\n        >\r\n          <thead className=\"TableHead\">\r\n            {headerGroups.map((headerGroup: any) => (\r\n              <tr\r\n                {...headerGroup.getHeaderGroupProps()}\r\n                className={cn('TableMod-headRow')}\r\n              >\r\n                {headerGroup.headers.map((column: any) => (\r\n                  <th\r\n                    // {...column.getHeaderProps()}\r\n                    {...column.getHeaderProps()}\r\n                    className={cn('TableMod-headCol')}\r\n                  >\r\n                    <div {...column.getSortByToggleProps()}>\r\n                      {column.render('Header')}\r\n                      <span>\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                          : ''}\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      {column.canFilter ? column.render('Filter') : null}\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row: any, i: any) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps(getRowProps(row))}>\r\n                  {row.cells.map((cell: any) => {\r\n                    if (cell.column.id === \"index\") {\r\n                      return <td>{row.index + 1}</td>;\r\n                    }\r\n\r\n                    return (\r\n                      <td\r\n                        {...cell.getCellProps()}\r\n                        className={cn('TableMod-col', 'TableMod-col--td')}\r\n                      >\r\n                        {cell.render('Cell')}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* \r\n        Pagination can be built however you'd like. \r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[100, 1000].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default React.memo(Table);\r\n","import React, { useEffect, useMemo, useState } from 'react';\nimport axios from 'axios';\nimport { LowSync, LocalStorage } from 'lowdb';\n\nimport Table from './components/table';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n// https://raw.githubusercontent.com/Joystream/founding-members/main/data/fm-info.json\n\ninterface Column {\n  Header: string;\n  accessor: string;\n}\n\ninterface Member {\n  memberHandle: string;\n  directScores: number[];\n  memberId: number;\n  totalDirectScore: number;\n  totalReferralScore: number;\n  totalScore: number;\n}\n\nexport default function App() {\n  const [rawData, setData] = useState<Member[]>([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const result: any = await axios.get(\n        'https://raw.githubusercontent.com/Joystream/founding-members/main/data/fm-info.json'\n      );\n      // console.log(result);\n      setData(result.data.scores.totalScores);\n    }\n\n    fetchData();\n  }, []);\n\n  const columns: Column[] = useMemo(\n    () => [\n      {\n        Header: '#',\n        accessor: 'index',\n      },\n      {\n        Header: 'ID',\n        accessor: 'memberId',\n      },\n      {\n        Header: 'Member handle',\n        accessor: 'memberHandle',\n      },\n      {\n        Header: 'Direct Score',\n        accessor: 'totalDirectScore',\n      },\n      {\n        Header: 'Referral Score',\n        accessor: 'totalReferralScore',\n      },\n      {\n        Header: 'Total Score',\n        accessor: 'totalScore',\n      },\n      ...rawData[0]?.directScores.map((score, index) => ({\n        Header: `Period ${index}`,\n        accessor: `period_${index}`,\n      })) || [],\n    ],\n    [rawData]\n  );\n\n  const data = rawData ? rawData.map((d:Member) => ({\n    ...d,\n    ...d.directScores.reduce((prev, curr, index) => ({\n      ...prev,\n      [`period_${index}`]: curr\n    }), {})\n  })) : [];\n\n  return (\n    <React.StrictMode>\n      <Table id=\"TableTradesHistory\" columns={columns} data={data} />\n    </React.StrictMode>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}